components:
  schemas:
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    Role:
      properties:
        id:
          title: Id
          type: string
        role_description:
          anyOf:
          - type: string
          - type: 'null'
          description: Description of the role
          title: Role Description
        role_name:
          description: Name of the role
          minLength: 1
          title: Role Name
          type: string
      required:
      - role_name
      - id
      title: Role
      type: object
    RoleWithUsers:
      description: Role schema with its assigned users.
      properties:
        id:
          title: Id
          type: string
        role_description:
          anyOf:
          - type: string
          - type: 'null'
          description: Description of the role
          title: Role Description
        role_name:
          description: Name of the role
          minLength: 1
          title: Role Name
          type: string
        user_ids:
          items:
            type: string
          title: User Ids
          type: array
      required:
      - role_name
      - id
      title: RoleWithUsers
      type: object
    User:
      properties:
        display_name:
          title: Display Name
          type: string
        email:
          description: User's email address
          title: Email
          type: string
        first_name:
          description: User's first name
          minLength: 1
          title: First Name
          type: string
        id:
          title: Id
          type: string
        last_name:
          description: User's last name
          minLength: 1
          title: Last Name
          type: string
        status:
          $ref: '#/components/schemas/UserStatus'
          default: active
          description: User status
        username:
          title: Username
          type: string
      required:
      - first_name
      - last_name
      - email
      - id
      - username
      - display_name
      title: User
      type: object
    UserCreate:
      properties:
        email:
          description: User's email address
          title: Email
          type: string
        first_name:
          description: User's first name
          minLength: 1
          title: First Name
          type: string
        last_name:
          description: User's last name
          minLength: 1
          title: Last Name
          type: string
        password:
          anyOf:
          - minLength: 6
            type: string
          - type: 'null'
          description: User's password (optional, will be auto-generated if not provided)
          title: Password
      required:
      - first_name
      - last_name
      - email
      title: UserCreate
      type: object
    UserCreateResponse:
      properties:
        display_name:
          title: Display Name
          type: string
        email:
          description: User's email address
          title: Email
          type: string
        first_name:
          description: User's first name
          minLength: 1
          title: First Name
          type: string
        generated_password:
          anyOf:
          - type: string
          - type: 'null'
          description: Auto-generated password (only shown on creation)
          title: Generated Password
        id:
          title: Id
          type: string
        last_name:
          description: User's last name
          minLength: 1
          title: Last Name
          type: string
        status:
          $ref: '#/components/schemas/UserStatus'
          default: active
          description: User status
        username:
          title: Username
          type: string
      required:
      - first_name
      - last_name
      - email
      - id
      - username
      - display_name
      title: UserCreateResponse
      type: object
    UserStatus:
      enum:
      - active
      - disabled
      - terminated
      title: UserStatus
      type: string
    UserUpdate:
      properties:
        email:
          anyOf:
          - type: string
          - type: 'null'
          title: Email
        first_name:
          anyOf:
          - minLength: 1
            type: string
          - type: 'null'
          title: First Name
        last_name:
          anyOf:
          - minLength: 1
            type: string
          - type: 'null'
          title: Last Name
        password:
          anyOf:
          - minLength: 6
            type: string
          - type: 'null'
          description: New password (optional)
          title: Password
        status:
          anyOf:
          - $ref: '#/components/schemas/UserStatus'
          - type: 'null'
          description: User status
      title: UserUpdate
      type: object
    UserWithRoles:
      description: User schema with their assigned roles.
      properties:
        display_name:
          title: Display Name
          type: string
        email:
          description: User's email address
          title: Email
          type: string
        first_name:
          description: User's first name
          minLength: 1
          title: First Name
          type: string
        id:
          title: Id
          type: string
        last_name:
          description: User's last name
          minLength: 1
          title: Last Name
          type: string
        role_ids:
          items:
            type: string
          title: Role Ids
          type: array
        status:
          $ref: '#/components/schemas/UserStatus'
          default: active
          description: User status
        username:
          title: Username
          type: string
      required:
      - first_name
      - last_name
      - email
      - id
      - username
      - display_name
      title: UserWithRoles
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
  securitySchemes:
    HTTPBearer:
      scheme: bearer
      type: http
info:
  title: FastAPI User & Role Testing Application
  version: 0.1.0
openapi: 3.1.0
paths:
  /api/v1/roles/:
    get:
      operationId: read_roles_api_v1_roles__get
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                title: Response Read Roles Api V1 Roles  Get
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Read Roles
      tags:
      - roles
  /api/v1/roles/{role_id}:
    get:
      operationId: read_role_api_v1_roles__role_id__get
      parameters:
      - in: path
        name: role_id
        required: true
        schema:
          title: Role Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleWithUsers'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Read Role
      tags:
      - roles
  /api/v1/roles/{role_id}/users:
    get:
      description: Get all users assigned to a specific role.
      operationId: get_role_users_api_v1_roles__role_id__users_get
      parameters:
      - in: path
        name: role_id
        required: true
        schema:
          title: Role Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                title: Response Get Role Users Api V1 Roles  Role Id  Users Get
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Get Role Users
      tags:
      - roles
  /api/v1/users/:
    get:
      operationId: read_users_api_v1_users__get
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                title: Response Read Users Api V1 Users  Get
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Read Users
      tags:
      - users
    post:
      operationId: create_user_api_v1_users__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Create User
      tags:
      - users
  /api/v1/users/{user_id}:
    delete:
      operationId: delete_user_api_v1_users__user_id__delete
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: string
      responses:
        '204':
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Delete User
      tags:
      - users
    get:
      operationId: read_user_api_v1_users__user_id__get
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithRoles'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Read User
      tags:
      - users
    patch:
      operationId: update_user_api_v1_users__user_id__patch
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Update User
      tags:
      - users
  /api/v1/users/{user_id}/roles/{role_id}:
    delete:
      description: Remove a role from a user.
      operationId: remove_role_from_user_api_v1_users__user_id__roles__role_id__delete
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: string
      - in: path
        name: role_id
        required: true
        schema:
          title: Role Id
          type: string
      responses:
        '204':
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Remove Role From User
      tags:
      - users
    post:
      description: Assign a role to a user.
      operationId: assign_role_to_user_api_v1_users__user_id__roles__role_id__post
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: string
      - in: path
        name: role_id
        required: true
        schema:
          title: Role Id
          type: string
      responses:
        '201':
          content:
            application/json:
              schema:
                title: Response Assign Role To User Api V1 Users  User Id  Roles  Role
                  Id  Post
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Assign Role To User
      tags:
      - users
  /health:
    get:
      operationId: health_check_health_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Health Check
